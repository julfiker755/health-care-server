generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               userRole
  needPasswordChange Boolean    @default(false)
  status             userStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("user")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  user          User     @relation(fields: [email], references: [email])
  profilePhoto  String?
  address       String
  gender        Gender
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admin")
}

model Doctor {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  doctor              User                 @relation(fields: [email], references: [email])
  profilePhoto        String?
  contactNumber       String
  address             String
  registrationNumber  String
  experience          Int
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  averageRating       Float?               @default(0)
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  specialities        doctorSpecialities[]
  review              Review[]

  @@map("doctor")
}

model Patient {
  id            String   @id @default(uuid())
  email         String   @unique
  patient       User     @relation(fields: [email], references: [email])
  name          String
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  review        Review[]

  @@map("patient")
}

model Specialities {
  id        String               @id @default(uuid())
  title     String
  icon      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  doctor    doctorSpecialities[]

  @@map("specialities")
}


model doctorSpecialities {
  specialitiesId String
  specialities   Specialities @relation(fields: [specialitiesId], references: [id])
  doctorId       String
  doctor         Doctor       @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
  @@map("doctor_specialities")
}

model Review {
  id        String   @id @default(uuid())
  patientId String
  patient   Patient  @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

enum Gender {
  MALE
  FEMALE
}

enum userRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum userStatus {
  ACTIVE
  BLOCKED
  DELETED
}
