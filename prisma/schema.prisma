generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               userRole
  needPasswordChange Boolean    @default(false)
  status             userStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("user")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  user          User     @relation(fields: [email], references: [email])
  profilePhoto  String?
  address       String
  gender        Gender
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admin")
}

model Doctor {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  doctor              User                 @relation(fields: [email], references: [email])
  profilePhoto        String?
  contactNumber       String
  address             String
  registrationNumber  String
  experience          Int
  gender              Gender
  appointmentFee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  averageRating       Float?               @default(0)
  specialities        doctorSpecialities[]
  review              Review[]
  schedule            doctorSchedule[]
  appointment         Appointment[]
  prescription        Prescription[]
  clinic              doctorClinic[]
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@map("doctor")
}

model Patient {
  id            String         @id @default(uuid())
  email         String         @unique
  patient       User           @relation(fields: [email], references: [email])
  name          String
  profilePhoto  String?
  contactNumber String
  address       String?
  age           Int?
  blood         String?
  gender        Gender
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  review        Review[]
  appointment   Appointment[]
  prescription  Prescription[]

  @@map("patient")
}

model Specialities {
  id        String               @id @default(uuid())
  title     String
  icon      String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  doctor    doctorSpecialities[]

  @@map("specialities")
}

model doctorSpecialities {
  specialitiesId String
  specialities   Specialities @relation(fields: [specialitiesId], references: [id])
  doctorId       String
  doctor         Doctor       @relation(fields: [doctorId], references: [id])

  @@id([specialitiesId, doctorId])
  @@map("doctor_specialities")
}

model Schedule {
  id          String           @id @default(uuid())
  date        String
  day         String
  startTime   String
  endTime     String
  status      scheduleStatus   @default(UNBOOKED)
  doctor      doctorSchedule[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  appointment Appointment?

  @@map("schedule")
}

model doctorSchedule {
  doctorId      String
  doctor        Doctor       @relation(fields: [doctorId], references: [id])
  scheduleId    String
  schedule      Schedule     @relation(fields: [scheduleId], references: [id])
  isBooked      Boolean      @default(false)
  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, scheduleId])
  @@map("doctor_schedule")
}

model Clinic {
  id           String         @id @default(uuid())
  name         String
  address      String
  loation      String?
  photos       clinicPhotos[]
  doctorClinic doctorClinic[]
  Appointment  Appointment?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("clinic")
}

model clinicPhotos {
  id       String @id @default(uuid())
  photo    String
  clinicId String
  clinic   Clinic @relation(fields: [clinicId], references: [id])

  @@map("clinic_photos")
}

model doctorClinic {
  id       String @id @default(uuid())
  clinicId String
  clinic   Clinic @relation(fields: [clinicId], references: [id])
  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  @@map("doctor_clinic")
}

model Appointment {
  id              String            @id @default(uuid())
  patientId       String
  patient         Patient           @relation(fields: [patientId], references: [id])
  doctorId        String
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  scheduleId      String            @unique
  schedule        Schedule          @relation(fields: [scheduleId], references: [id])
  appointmentType appointmentType   @default(ONLINE)
  clinicId        String?           @unique
  clinic          Clinic?           @relation(fields: [clinicId], references: [id])
  videoCallingId  String            @unique
  status          appointmentStatus @default(SCHEDULED)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorSchedule  doctorSchedule?
  prescription    Prescription?
  payment         Payment?

  @@map("appointment")
}

model Payment {
  id            String      @id @default(uuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  amount Int
  transactionId String @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("payment")
}

model Prescription {
  id            String      @id @default(uuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  doctorId      String
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  patientId     String
  patient       Patient     @relation(fields: [patientId], references: [id])
  instructions  String
  followUpDate  DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("prescription")
}

model Review {
  id        String   @id @default(uuid())
  patientId String
  patient   Patient  @relation(fields: [patientId], references: [id])
  doctorId  String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}

enum Gender {
  MALE
  FEMALE
}

enum userRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum userStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum scheduleStatus {
  BOOKED
  UNBOOKED
}

enum appointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum appointmentType {
  ClINIC
  ONLINE
}

